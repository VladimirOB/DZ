#include <iostream>
#include <functional>

using namespace std;

// передача лямбда-выражения в качестве параметра в обычную функцию
// лямбда-выражение определяет что будет происходить с двумя первыми параметрами
int test(int a, int b, function<int(int, int)> fn)
{
	return fn(a, b);
}

// возврат лямбда-выражения в качестве выходного параметра из обычной функции
// test2 - генератор кода (генератор лямбда-выражений)
function<void()> test2(int a)
{
	if(a % 2)
		return [a]() { cout << "odd: " << a << endl; };
	else
		return [a]() { cout << "even: " << a << endl; };
}

int pp = 1;

void main()
{
	// объявление лямбда-выражения с именем и без параметров
	// [] - перечисление захватываемых объектов
	// () - передача параметров
	// -> - указание типа возращаемого результата
	// {} - тело лямбда-выражения
	auto lambda1 = [] ()
	{
		cout << "Lambda function" << endl;
	};

	// вызов лямбда-выражения
	lambda1();

	// объявление лямбда-выражения без имени и вызов его
	[]
	(int n)
	{cout << "Lambda function, n = " << n << endl;} (3);

	// объявление лямбда-выражения и вызов его
	auto lx2 = [] (auto const& n) -> int
	{
		return n * 2;
	};

	cout << lx2(2.8) << endl;

	int c = 10;
	int d = 1;

	// захват переменных внутри лямбда-выражения 
	// d - захват по значению
	// &c - захват по ссылке
	auto l_test = [d, &c] (auto const& n) -> int
	{
		return  d * c * n * 2 * pp;
	};

	c = 30;
	d = 5;

	cout << "l_test: " << l_test(2) << endl;

	// [=] - захват всех видимых переменных по значению
	// [&] - захват всех видимых переменных по ссылке
	cout << "[=]() " << [=]() -> int {return c * d; } () << endl;

	// mutable позволяет локально менять значение захваченных по значению переменных
	[&d]() mutable { d = 12; } ();

	cout << "d = " << d << endl;

	// вызов функции и передача кода в качестве параметра
	cout << test(3, 2, [](int a, int b) { return a + b; }) << endl;

	// вызов функции и передача кода в качестве параметра
	cout << test(3, 2, [](int a, int b) { return a - b; }) << endl;

	// возвратить из test2 код и сохранить в переменную lambda
	auto lambda = test2(8);
	lambda();
	lambda();

	// возвратить из test2 код и сразу выполнить
	test2(7) ();

	// копнуть глубже
	// https://habr.com/ru/company/otus/blog/444524/
}