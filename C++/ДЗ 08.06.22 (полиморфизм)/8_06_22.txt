1. Разработать класс Person, имеющий следующие поля:
- FirstName
- LastName
- Age
- Address

Методы:
- констр
- дестр
- Print()
- сеттеры
- геттеры

Разработать класс Worker, наследующий от Person, имеющий следующие поля:
- Salary - размер ЗП
- LockerNumber - номер личного шкафчика

Методы:
- констр
- дестр
- Print()
- сеттеры
- геттеры

Разработать класс Manager, наследующий от Person, имеющий следующие поля:
- Salary - размер ЗП
- Bonuses - размер денежных бонусов
- RoomNumber - номер личного кабинета
- CarNumber - номер служебного автомобиля

Методы:
- констр
- дестр
- Print()
- сеттеры
- геттеры

Разработать класс Freelancer, наследующий от Person, имеющий следующие поля:
- HourCost - стоимость часа работы
- NumberOfHours - количество отработанных часов

Методы:
- констр
- дестр
- Print()
- сеттеры
- геттеры

Разработать класс Staff (Сотрудники), имеющий следующие поля:
- Person** staff - массив сотрудников
- MaxSize - макс колво сотр
- CurrentSize - тек колво сотр

Методы:
- констр
- дестр
- Add(Person* ) - добавить сотрудника
- Print() - печать всех сотрудников
- GetSalariesSum() - посчитать общие расходы на ЗП

2. Разработать класс Queue, имеющий следующие поля:
- int* numbers - массив, на основе которого создаётся стек
- CurrentSize - текущий размер стека
- MaxSize - максимальный размер стека

Методы:
- констр
- дестр
- bool Enqueue(int num) - поместить в очередь
- int Dequeue() - вытащить из очереди и вернуть
- int Show() - показать крайнее число в стеке, но не вынимать из стека
- Clear() - полностью очистить стек (удалить все элементы)
- Print() - показать содержимое стека